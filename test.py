"""
Testing file. Parse test files into Gene, Isoform, and Exon objects and test 
implementation.
"""

import sys
import re
import time
import zlib
import signal
import pickle
# import unittest

import sufarray 
from multiprocessing import Process
from pprint import pprint
# from itertools import zip_longest, islice

from shared import *
from project import *

def parse_reads():
    # Dict of reads
    reads = {}
    filepath = 'reads.fa'
    with open(filepath) as fp:
        line = fp.readline().rstrip()
        key = ""
        while line:
            if re.search("^>", line):
                key = line[1:]
            else:
                reads[key] = line
            line = fp.readline().rstrip()
    return reads

def parse_genes():
    # list of genes
    genes = []
    filepath = 'genes.tab'
    with open(filepath) as fp:
        line = fp.readline().rstrip()
        gene_id = ""
        curr_isoforms = []
        isoform_id = ""
        curr_exons = []
        # Iterate through all lines
        while line:
            # Split into array by whitespace
            line = line.split()

            if line[0] == "gene" or line[0] == "unknown_gene":
                if gene_id:
                    curr_isoforms.append(Isoform(isoform_id, curr_exons))
                    genes.append(Gene(gene_id, curr_isoforms))
                    isoform_id = ""
                    curr_isoforms = []
                gene_id = line[1]
                isoforms = line[2].split(";")
            elif line[0] == "isoform" or line[0] == "unknown_isoform":
                if isoform_id:
                    curr_isoforms.append(Isoform(isoform_id, curr_exons))
                    curr_exons = []
                isoform_id = line[1]
                exons = line[2].split(";")
            elif line[0] == "exon" or line[0] == "unknown_exon":
                curr_exons.append(Exon(line[1], int(line[2]), int(line[3])))

            line = fp.readline().rstrip()

        if gene_id:
            curr_isoforms.append(Isoform(isoform_id, curr_exons))
            genes.append(Gene(gene_id, curr_isoforms))
            isoform_id = ""
            curr_isoforms = []

    return genes

def parse_genome():
    # Dict of reads
    genome = ""
    filepath = 'genome.fa'
    with open(filepath) as fp:
        index = fp.readline().rstrip()
        genome = fp.readline().rstrip()
    return genome

def timeout_handler(signum, frame):
    raise Exception("function timeout")

def test_init(sequence, genes):
    # Test initialization time
    # signal.signal(signal.SIGALRM, timeout_handler)
    # signal.alarm(500)
    # try:
    start_time = time.time()
    aligner = Aligner(sequence, genes)
    print("--- %s seconds ---" % (time.time() - start_time))
    # except Exception as exc:
    #     print(exc)
    
    return aligner

def test_greedy(aligner, read_sequence):
    # Test align time
    start_time = time.time()

    # isoform_id = list(aligner._isoforms.keys())[0]
    # isoform = aligner._isoforms[isoform_id]
    m, occ, sa =  aligner._m, aligner._occ, aligner._sa
    locations, num_mismatches = aligner.recursive_inexact_alignment(read_sequence, m, occ, 0, None)
    print("\nlocations: ", locations, "\nnum mismatches: ", num_mismatches)
    index = sa[locations[0]-1]
    print(aligner._genome_seq[index:index+len(read_sequence)])
    print("--- %s seconds ---" % (time.time() - start_time))


def test_exact_matches(p, s):
    sa = get_suffix_array(s)
    L = get_bwt(s, sa)
    F = get_F(L)
    M = get_M(F)
    occ = get_occ(L)
    print("\ntesting exact suffix matches")
    locations = exact_suffix_matches(p, M, occ)
    print("locations: ", locations)

def test_align_to_transcriptome(aligner, p):
    return aligner.align_to_transcriptome(p)

def test_align_seeds(aligner, p):
    m, occ =  aligner._m, aligner._occ
    values = aligner.align_seeds(p)

def test_align(aligner, p):
    return aligner.align(p)

def test_align_to_genome(aligner, p):
    reads = aligner.align_to_genome(p)
    print("reads: ", reads)

example = "GAAAAGGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGCGAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGC$"
example2 = "GAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATA$"
test_iso = "GAAAATGACATTTGTAATAGGAATTTTAAGATTTTATTACTTCTTCTTTCATCTCCTCAAAGGAATGAAGAAATGTTGGTGGGCAGATCTTCCTTTCCCATGCAGTATTTTCCAATTAATAATACTTCTTTACCTCAAGAATATTTTCTCTTTCAGAAGATGAGTGGCATGTGTATAATCCAGTGCTGCAGCTTCCTTACTATGAAATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGACAGCTCCACTTCCTAATAGTGCATCCGTGTCTTCCTCACTGAATCATGTTCCAGATCTTGAGGCTGGACCCAGCTCATATAAATGGACTCACCAACAACCAAGTGACTCTGACCTTTATCAGATGAATAAACGAAAGAGACAAAAGCAAACAAGTGATAGTGATAGTAGCACAGACAACAACAGAGGCAACGAATGTAGCCAAAAGTTCCGAAAGTCTAAGAAGAAGAAAAGATACTAGTATTACCTACAAATGAAACTTACCTACACTGATCTTAGTTCTCTTATGAAAAAAATAAGATGTTATCCCATCAAATAAACAATGTCATGGC$"

# @profile
def main():
    print("Testing Sequence alignment")

    print("\nParsing reads")
    reads = parse_reads()

    print("\nParsing genome")
    genome = parse_genome()

    print("\nParsing genes")
    genes = parse_genes()
    # pprint(genes)
    # first = genes.pop()
    # iso = ''
    # for exon in first.isoforms[0].exons:
        # print((exon.start, exon.end-exon.start)) in genome
        # iso += genome[exon.start:exon.end] + " "
    # print(iso)
    # print(first.id)

    # print("\nTesting suffix array")
    # start_time = time.time()
    # suffix_array = get_suffix_array(example)
    # print("--- %s seconds ---" % (time.time() - start_time))
    # print("\nTesting thiers")
    # start_time = time.time()
    # sa_theirs = sufarray.SufArray(example).get_array()
    # print(len(suffix_array))
    # print(len(sa_theirs))
    # # diff =  set(sa_theirs) - set(suffix_array)
    # # print(list(diff))
    # # print(suffix_array)
    # print("--- %s seconds ---" % (time.time() - start_time))
    # print("accurate? ", suffix_array == sa_theirs)


    # print("Pickle")
    # aligner = test_init(genome, genes)
    # pickle.dump(aligner, open('aligner_onject', 'wb'))
    print("Unpickle")
    aligner = pickle.load(open('pickle/aligner_onject', 'rb'))


    # query = "GAAAAGGACATTTGTAATAGGAATTTTAAGATTTTATTA"

    # # query = "CAAAAGG"

    # test_exact_matches(query, example)
    # # test_exact_matches_two(query, example)

    # print("\nTesting dummy genome")
    # print("Genome length:", len(example))

    # aligned = test_align_to_genome(aligner, query)
    
    # test_align_to_transcriptome()
    # aligner = test_init(genome, genes)

    full_isoform = "TGGCGCTCCTGCTGTGCTTCGTGCTCCTGTGCGGAGTAGTGGTTTCGCCAGAAGTTTGAGTATCACTACTCCTGAAGAGATGATTGAAAAAGCCAAAGGGGAAACTGCCTATCTGCCATGCAAATTTACGCTTAGTCCCGAAGACCAGGGACCGCTGGACATCGAGTGGCTGATATCACCAGCTGATAATCAGAAGGTGGATCAAGTGGAAGATGTGCCACCTCCAAAGAGCCGTACGTCCACTGCCAGAAGCTACATCGGCAGTAACTGAACTCCCAATCTGCTTCAAGATCTGTCTTAGGATTGGTGAATTATGTTCATTTTTAAAAAGGGATGTGATAGACAACATCTAGAGAAACAGGCAAGAGTATATATCTGAAAAGGACAAGGCGCTTTGAAACTGACAGCTCATCAACAGGTTCATGGATGAACCTGGAAATATTTATAAATATTGATTCCAGATTTCAGGACGGGGTTTCGAAATGTTGCCCAGGTTGGTCTAGAACTCCCGGACTCAAGTGATCCCCCGACCAGGCCTCCCAAAGTGCTGGGATTATCGGTGTGAGCCACCAACCCCTGCAGAGTCTACATCTGAAATAAACCACAGAAGCAAGGATATCACTTAAACAATGTAACTTACCAATTCAGTCTGAGTGAGTTTTGTAGTTTATAACATATTGATGAAAACAGTTAAGTGTCCACATTCCGTTTACATAAGAGAATGCTATTCAAGCTTTTAAAATAAAAAACTTAAACTATTCCCCTCACCCCCCAAAAAGTCTAACTATAAAGATGGGTTTGCTACAAAATAATTAGCAAAACTGATTTACCAAGTAAGATGTCCTCCCGCTCACTGCCCCCCAGAAATACGTATACTGTAGGAATACTCCTAGGAAGTGACACAAGTGAAAGAAAGAATATTCTTTCAATATGCTAAAAACATCTACAGTGCACTAAAAAAAAGTCCCTAAATTTGGCAATACATTTCTTCCAAAAATGTTATTCAATAACATAAACATTATGAAGTAGAACTGGCTGTCCCATATGTTCAGAATAAAAGGGTTAAGTGGAGTCCTGCATAACTAGCAGTAGACGCGATCTGTTCGCTACTACCGGCCTCCCCTGGCTGTTAAAAGCAGATGGTGGCTGAGGTTTGTTCAATGCCCACTGCCTCTACTGTGAAGAAGCCATTTGATCTCAGGAGCAAGATGGGCAAGTGGTGCCACCACCGCTTCCCCTGCTGCAGGGGGAGCGGCAAGAGCAACATGGGCACTTCTGGAGACCACGACGACTCCTTTATGAAGATGCTCAGGAGCAAGATGGGCAAGTGTTGCCGCCACTGCTTCCCCTGCTGCAGGGGGAGCGGCACGAGCAACGTGGGCACTTCTGGAGACCATGAAAACTCCTTTATGAAGATGCTCAGGAGCAAGATGGGCAAGTGGTGCTGTCACTGCTTCCCCTGCTGCAGGGGGAGCGGCAAGAGCAACGTGGGCGCTTGGGGAGACTACGACCACAGCGCCTTCATGGAGCCGAGGTACCACATCCGTCGAGAAGATCTGGACAAGCTCCACAGAGCTGCCTGGTGGGGTAAAGTCCCCAGAAAGGATCTCATCGTCATGCTCAGGGACACTGACATGAACAAGAGGGACAAGGAAAAGAGACTGCTCTACATTTGGCCTCTGCCAATGGAAATTCAGAAGTAGTACAACTCCTGCTGGACAGACGATGTCAACTTAATGTCCTTGACAACAAAAAAAGGACAGCTCTGATAAAGCCATACAATGCCAGGAAGATGAATGTGTGTTAATGTTGCTGGAACATGGCGCTGATCGAAATATTCCAGATGAGTATGGAAATACCGCTCTACACTATGCTATCTACAATGAAGATAAATTAATGGCCAAAGCACTGCTCTTATATGGTGCTGATATTGAATCAAAAAACAAG GTGGCCTCACACCACTTTTGCTTGGCGTACATGAACAAAAACAGCAAGTGGTGAAATTTTTAATCAAGAAAAAAGCTAATTTAAATGTACTTGATAGATATGGAAGACTGCCCTCATACTTGCTGTATGTTGTGGATCAGCAAGTATAGTCAATCTTCTACTTGAGCAAAATGTTGATGTATCTTCTCAAGATCTATCTGGACAGACGGCCAGAGAGTATGCTGTTTCTAGTCATCATCATGTATTTGTGAATTACTTTCTGACTATAAAGAAAAACAGATGCTAAAAATCTCTTCTGAAAACAGCAATCCAGACAAGACTTAAAGCTGACATCAGAGGAAGAGTCACAAAGGCTTAAAGTCAGTGAAAATAGCCAGCCAGAGAAATGTCTCAAGAACCAGAAATAAATAAGGACTGTGATAGAGAGTTGAAGAAGAAATAAAGAAGCATGGAAGTAATCCTGTGGGATTACCAGAAAACCTGACTAATGGTGCCAGTGCTGGCAATGGTGATGATGGATTAATTCCACAAAGGAGGAGCAGAAAACCTGAAAATCAGCAATTTCCTGACACTGAGAATGAAGAGTATCACAGGATGAACAAAATGATACCCGGAAACAACTTTCTGAAGAACAGAACACTGGAATATCACAAGATGAGATTCTGACTAATAAACAAAAGCAGATAGAAGTGGCTGAACAGAAAATGAATTCTGAGTTTCTCTTAGTCATAAGAAAGAAGAAGATCTCTTGCGTGAAAACAGCGTGTTGCAGGAAGAAATTGCCATGCTAAGACTGGAACTAGATGAAACAAAACATCAGAACCAGCTAAGGGAAAATAAAATTTTGGAGGAAATTGAAAGTGTGAAAGAAAAGACTGATAAACTTCTAAGGGCTATGCAATTGAATGAAGAAGCATTAACGAAAACCAATATTTAAGTACAGTGGACAGCTTAGG"

    true_output = [(0, 6462130, 42), (42, 6496027, 33)]
    true_output1 = [(0, 6462130, 42), (42, 6496027, 138)]
    pattern1 = "TGGCGCTCCTGCTGTGCTTCGTGCTCCTGTGCGGAGTAGTGGTTTCGCCAGAAGTTTGAGTATCACTACTCCTGAAGAGATGATTGAAAAAGCCAAAGGGGAAACTGCCTATCTGCCATGCAAATTTACGCTTAGTCCCGAAGACCAGGGACCGCTGGACATCGAGTGGCTGATATCACC"
    pattern = "TGCCGCTCCTGCAGTGCTTCGTGCACCTGTGCGGAGTCGTGGTTTCGCCAGAAGTTTGAGTATCACTACTCCTGA"

    # print("\nTesting align to transcriptome: ")
    # out = test_align_to_transcriptome(aligner, pattern)
    # print("true: ", true_output)
    # print("out: ", out)
    # print(f'accurate? {true_output == out}')


    print("\nTesting align: ")
    # test_align_seeds(aligner, dummy_genome)
    # test_exact_matches(dummy_genome, example2)
    # test_greedy(aligner, "GCAA")
    # test_greedy(aligner, dummy_genome)
    out = test_align(aligner, pattern)
    print("true: ", true_output)
    print("out: ", out)
    print(f'accurate? {true_output == out}')

    # # print("\nTesting init function")
    # # aligner = test_init(example, genes)

    # # print("\nTesting greedy: ")
    # # test_align_seeds(aligner, dummy_genome)
    # # test_exact_matches(dummy_genome, example2)
    # # test_greedy(aligner, "GCAA")

    # print('\nTesting greedy')
    # print(len(dummy_genome))
    # aligner = test_init(example2, genes)
    # test_greedy(aligner, dummy_genome)

    # test_exact_matches("GGGATG","AAAATGACATTAAAATGACATTAAAATGACATTAAAATGACATTAAAATGACATTAAAAATTGGGAC$")
    

if __name__ == "__main__":
    main()